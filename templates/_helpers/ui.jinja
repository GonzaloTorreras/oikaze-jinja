{%- if not custom -%}
    {%- set custom = {} -%}
{%- endif -%}
{%- if not custom.legacy_menu_generator is defined -%}
{#
    legacy_menu_generator(items,opts): Converts "legacy" (from config settings format) to a compatible for menuConstructor().
    - items (tuple): ( ("link/", "text"), ("link2/", "text2") )
        Are expected to follow the tuple config.py format, accepts any amount of subdomains.
    - Opts (dict): { ... }
        Directly passed to menuConstructor(). Check it to see all the available opts.

    Example: Use case in header menu:
   {{- ui.legacy_menu_generator(navigation_links[lang])-}}
#}
{%- macro legacy_menu_generator(items, opts = false) -%}
    {{- macros.verbose( "\nmacro:\nui.legacy_menu_generator(\n%s,\n %s\n)\n"|format(items, opts) ) -}}
    {%- set new_menu = [] -%}
    {%- for link,text in items -%}
        
        {%- set item = {
            "text": text,
            "href": link   
        } -%}

        {%- if link is not string -%}
            {%- set children = [] -%}

            {#
                For some reason trying to iterate a nested
                tupple as (key,val in tupple) gives an error.
            #}
            {%- for child in link recursive -%}
                
                {%- set textC = child[1] -%}

                {%- if child[0] is not string -%}
                    {{- loop( child[0] ) -}}
                    {%- set hrefC = "#" -%}
                    {%- set childrenC = [] -%}
                {%- else -%}
                    {%- set hrefC = child[0] -%}
                    {%- set childrenC = false -%}
                {%- endif -%}

                {#
                    TODO: Nested children (2nth) is not working and are parsing to prev level
                    - Parent
                        - Child 1
                            - Child 1.1 (not working).
                        - Child 2
                #}
                {%- set _dummy = children
                                    .append({
                                        "text": textC,
                                        "href": hrefC,
                                        "class": "submenu-item",
                                        "data-depth": loop.depth,
                                        "children": childrenC
                                    }) -%}
            {%- endfor -%}
            
            {%- set _dummy = item.update({ "href": "#", "children": children }) -%}
        {%- endif -%}

        {%- set _dummy = new_menu.append(item) -%}
    {%- endfor -%}
    {{- menuConstructor(new_menu, opts) -}}
{%- endmacro -%}
{%- endif -%}
{#
    TODO ui.menuConstructor():
        - Accesibility ARIA
    -----------------------
    menuConstructor(items,opts): Richer menu generator that accepts xmlAttr format to generate a 100% customizable menu.
    - items (dict): All the dict will be used to print HTML from XMLAttr. The only "required" are text and href.

    - opts (dict):
        - menuFlow (string): horizontal || vertical
            This is CSS dependent. It will use .menu-horizontal or .menu-vertical. Default: horizontal.

        - menuExtraClass (string): "any"
            If you need custom styles, or want to have a more customized menu you can add extra classes.
            It will be added after default classes to UL element.
            ul.menu-horizontal.flex-hright.customClass
    Example:
    menuConstructor({

    },{})
#}
{%- macro menuConstructor(items, opts = false) -%}
{{- macros.verbose( "\nmacro:\nui.menuConstructor(\n%s,\n%s\n)\n"|format(items, opts) ) -}}

     {# TODO: Vertical flow extra classes #}
    {%- set _opts = {
        "menuFlow": "horizontal", 
        "menuExtraClass": ""
    } -%}

    {%- set _dummy = _opts.update(opts) if opts -%}{# mix incoming opts with defaults #}

{{- '<ul class="menu-%s flex-hright %s">'|format(_opts.menuFlow, _opts.menuExtraClass ) -}}
    {%- for item in items recursive -%} {# TODO: Sort if class active (active should be first element, so CSS can be simpler and have ":focus ~" for accesibility working. #}
        
        {%- set _dummy = item.update({"class": "menu-link %s"|format(item.class) }) -%}

        {%- set children = item.pop("children") if item.children else false -%}
        {%- set text = item.pop("text") -%}

        {%- set extra_li_class = item.pop("extra_li_class") if item.extra_li_class else false -%}
        
        <li class="menu-item{{- (extra_li_class if extra_li_class) ~ (' active' if 'active' in item.class ) ~ (' with-children ' if children) -}}">
            <a {{- item|xmlattr -}}>{{- text -}}</a>
            {%- if children -%}
                <ul class="submenu">
                {{- loop(children) -}}
                </ul>
            {%- endif -%}
        </li>
    {%- endfor -%}
</ul>
{%- endmacro -%}

{#


#}
{%- macro langSwitcher() -%}
{{- macros.verbose( "\nmacro:\nui.langSwitcher()\n" ) -}}
    {%- set translation_links = [
        {
            "href": "#",
            "text": lang,
            "class": "active",
            "children": []
        }
    ] -%}
    {%- for langname in translations|sort -%}
        {# TODO: Get real dynamically the link to translated content post, index, cats etc. fallback -> to root + lang: /{lang} #}
        <!-- {{- kind -}}-->
        {%- set indexes_kind = ["author_index", "author", "archive", "tag", "tag_index", "category", "category_index", "index"] -%}
        {%- if lang != langname -%} {# Ignore current lang #}
            
            {%- set text =  langname if translation_menu_lang_code else messages("LANGUAGE", langname ) -%} {# Display full lang name or code lang. #}
            
            {# Link depends on page kind #}

            {%- if post and post.is_translation_available(langname) -%}
                 {%- set link = post.permalink(langname) -%}
            {%- elif kind in indexes_kind -%}

                {#%- set link = _link(kind, None, langname) -%#}
                {% set link = permalink %}
                
            {%- else -%}
                {# fallback to root, tho it shouldn't execute? #}
                {%- set link = _link('root', None, langname)  -%} 
            {%- endif -%}

            
            {% set class = "lang-item-link" ~ (" active " if lang == langname) %}
            
            {# update dict with all the links xmlAttr formatted. #}
            {%- set _dummy = translation_links[0].children.append({
                "href":link,
                "text": text,
                "rel": "alternate",
                "hreflang": langname,
                "class": class,
                "extra_li_class": "lang-item"
            }) -%} 
        {%- endif -%}


    {%- endfor -%}
    <div class="translation-menu-wrapper">
       {{- menuConstructor(translation_links, {"menuExtraClass": "translation-menu"}) -}}
    </div>
{%- endmacro -%}

{#
    TODO: ui.searchForm()
    - messages: SEARCH + SEARCH_PLACEHOLDER 
    - Button submit icon
    ----------------------
    Nothing special, just one place to handle the HTML of all search forms,
    so if you need to change it you will only need to do it here.
#}
{%- macro searchForm() -%}
{{- macros.verbose("\nmacro:\nui.searchForm()\n") -}}
<div class="search-form-wrapper" role="search">
    <form class="search-form" action="#">
        <input type="text" required placeholder="{#{ messages('SEARCH_PLACEHOLDER', langname ) }#}" />
        <button type="submit">S{#{ messages('SEARCH', langname ) }#}</button>
    </form>
</div>
{%- endmacro -%}

{#
    This will help to generate richer pages
#}
{%- macro section(section) -%}
{{- macros.verbose( "\nmacro:\nui.section(\n%s\n)\n"|format(section) ) -}}
    {%- set opts = {
            "ele": "div",
            "class":"section "
        }
    -%}
    {%- for key,val in section.items() -%}
        {# Overwrite defaults opts with arg #}
        {%- if key != "class" -%}
            {%- set _dummy = opts.update( {key: val}) -%}
        {%- else -%}
            {%- set _dummy = opts.update( {key: "section " ~ val }) -%}
        {%- endif -%}
    {%- endfor -%}

    {%- set element = opts.pop("ele") -%} {# Remove key ele from dict to be used #}
<{{- element -}} {{- opts|xmlattr -}}>
    <div class="container">
        {{- caller() -}}
    </div>
</{{- element -}}>
{%- endmacro -%}

{#

    Blog post listing
#}
{%- macro post_listing(posts) -%}
{{- macros.verbose( "\nmacro:\nui.post_listing(\n%s\n)\n"|format(posts) ) -}}

    <div class="post-listing">
    {%- for post in posts -%}
        <article class="post-item" 
        {%- if is_verbose -%}
        data-translations_available="{{- post.translated_to|join(', ')|e -}}"
        data-reading_time="{{- post.reading_time|e -}}" 
        data-post_cats="{{- post.categories|join(', ')|e -}}"
        data-post_tags="{{- post.tags|join(', ')|e -}}"
        data-post_author="{{- post.author()|e -}}" 
        data-post_date="{{- post.date|e -}}"
        data-post_status="{{- post.post_status|e -}}"
        data-post_featured_image="{{- post.featured_image|e -}}" 
        data-post_previewimage="{{- post.previewimage|e -}}" 
        {%- endif -%}
        >
        {{- "<!-- %s -->"|format(post|pprint) if is_verbose -}}

            <header class="post-header">
                {%- if post.previewimage -%}
                    <a class="post-link" href="{{- post.permalink()|e -}}">
                        {{- '<img loading="lazy" class="post-img" src="%s" />'|format( post.previewimage|e )  -}}
                    </a>
                {%- endif -%}
                {{- post_tags(post.tags) -}}
            </header>
            <section class="post-content">

                <h2 class="post-title">
                    <a class="post-link" href="{{- post.permalink()|e -}}">
                        {{- post.title()|e -}}
                    </a>
                </h2>
                <div class="post-body">{{- post.text()|striptags|truncate(50,false,"")|e -}}</div>
            </section>
        </article>
    {%- endfor -%}
    </div>
{%- endmacro -%}

{%- macro post_tags(tags = false) -%}
{{- macros.verbose( "\nmacro:\nui.post_tags(\n%s\n)\n"|format(tags|pprint) ) -}}
    {%- if (not tags) and post is defined -%}
        {%- set tags = post.tags -%}
    {%- endif -%}
    <!-- {{- tags -}} -->
    {%- if tags -%}
    <ul class="post-tags" itemprop="keywords">
        {%- for tag in tags -%}
            {{- '<li><a class="post-tag-link" href="%s">%s</a></li>'|format(_link('tag',tag),tag|e) -}}
        {%- endfor -%}
    </ul>
    {%- endif -%}
{%- endmacro -%}